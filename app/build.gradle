apply plugin: 'com.android.application'
//集成fir.im发布
apply plugin:'im.fir.plugin.gradle'

fir{
    //必填 上传 fir.im apk 字段，否则无法上传 APP 到 fir.im
    apiToken getLocalProperty("FIR_TOKEN")
    //可选 上传fir.im 中显示的changelog
    changeLog getLocalProperty("UPDATE_LOG")
}

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "com.plusub.lib.example"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
        //dex突破65535的限制
        multiDexEnabled true
        buildConfigField "String", "FIR_TOKEN", getLocalProperty("FIR_TOKEN_STRING")
        //在BuildConfig文件中生成bool字段AUTO_UPDATES默认为true
        buildConfigField "boolean", "AUTO_UPDATES", "true"
        //设置输出app默认前缀名称
//        project.ext.set("archivesBaseName", "XUtilsLibExample_v" + versionName + "_"+today);

        //test
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }

    //签名配置
    signingConfigs {
        release {
            //这样写就得把plusub_keystore.key文件放在项目app目录下，否则写实际路径
            //如/home/lippi/.android/debug.keystore
            //storeFile file("file://${project.gradle.debugKeystore}")
            storeFile file(getLocalProperty("STORE_FILE"))
            storePassword getLocalProperty("KEYSTORE_PASS")
            keyAlias getLocalProperty("ALIAS_NAME")
            keyPassword getLocalProperty("ALIAS_PASS")
        }
    }

    //构建配置
    buildTypes {
        debug {
            //对齐优化设置为true，否则找不到该task (默认不写也是true)
            zipAlignEnabled true
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false //是否进行混淆
            shrinkResources true //是否去除无效的资源文件
            zipAlignEnabled true //zipAlign优化
            //混淆配置文件，proguard-rules.txt放置在app目录下，如果没有则写实际路径
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release //签名配置

            //自定义apk安装包名
            applicationVariants.all { variant ->
                variant.mergedFlavor.versionCode = gitVersionCode()
                variant.mergedFlavor.versionName = gitVersionTag()
                variant.outputs.each { output ->
                    output.outputFile = new File(
                            output.outputFile.parent + "/${variant.buildType.name}",
                            "XUtilsLibExample-${variant.buildType.name}-${variant.versionName}-${releaseTime()}.apk".toLowerCase())
                }
            }
        }
    }

    //多渠道构建配置
    productFlavors {
//        "xiaomi"{
//            //在xiaomi发布版中改变BuildConfig值AUTO_UPDATES为false
//            buildConfigField "boolean", "AUTO_UPDATES", "false"
//            //在xiaomi发布版中设置applicationId
//            applicationId "com.plusub.xiaomi"
//            testApplicationId "com.plusub.xiaomi.test"
//            versionCode 3
//            versionName "3.0"
//        }
//        "own"{}
//        "baidu"{}
//        "wandoujia"{
//            applicationId "com.plusub.wandoujia"
//        }
    }

    //循环设置channelName名字，channelName是在manifest文件中定义的
//    productFlavors.all {flavor ->
//        flavor.manifestPlaceholders = [channelName: name]
//    }

    //打包过滤文件
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
//        exclude 'META-INF/DEPENDENCIES.txt'
//        exclude 'META-INF/NOTICE'
//        exclude 'META-INF/LICENSE'
//        exclude 'META-INF/DEPENDENCIES'
//        exclude 'META-INF/notice.txt'
//        exclude 'META-INF/license.txt'
//        exclude 'META-INF/dependencies.txt'
//        exclude 'META-INF/LGPL2.1'
    }

    //fresco的配置，Fresco支持五种 ABI（CPU类型）按需选择
    // rest of your app's logic，http://fresco-cn.org/docs/multiple-apks.html
//    splits {
//        abi {
//            enable true
//            reset()
//            include 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a'
//            universalApk false
//        }
//    }
}

//查找Class类型为JavaCompile的任务，并且设置该任务编码为utf-8
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile(name: 'pulltorefresh_lib', ext: 'aar')
    compile "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:design:$SUPPORT_LIBRARY_VERSION"
    compile 'com.nineoldandroids:library:2.4.0'
    //LeakCanary(XUtilsLib库里面有包含)
//    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
//    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
//    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'


    //retrofit and rxjava
    compile 'io.reactivex:rxjava:1.1.3'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
    compile "com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION"
    compile "com.squareup.retrofit2:adapter-rxjava:$RETROFIT_VERSION"
    compile 'com.squareup.okhttp3:logging-interceptor:3.2.0' //http日志拦截

    //stetho
    compile 'com.facebook.stetho:stetho:1.3.1'
    compile 'com.facebook.stetho:stetho-okhttp3:1.3.1'

    //fresco
    compile "com.facebook.fresco:fresco:$FRESCO_VERSION"
    // 在 API < 14 上的机器支持 WebP 时，需要添加
//    compile "com.facebook.fresco:animated-base-support:$FRESCO_VERSION"
    // 支持 GIF 动图，需要添加
    compile "com.facebook.fresco:animated-gif:$FRESCO_VERSION"
    // 支持 WebP （静态图+动图），需要添加
    compile "com.facebook.fresco:animated-webp:$FRESCO_VERSION"
    compile "com.facebook.fresco:webpsupport:$FRESCO_VERSION"
    // 仅支持 WebP 静态图，需要添加
//    compile "com.facebook.fresco:webpsupport:$FRESCO_VERSION"
    //替换默认的下载方式
    compile "com.facebook.fresco:imagepipeline-okhttp3:$FRESCO_VERSION"

//test provided
    //发布到360版本的用Compile在编译和打包都包含fastjson库，非360用provided只是在编译时使用包，不打包
//    provided 'com.alibaba:fastjson:1.1.45.android'
//    qihu360Compile 'com.alibaba:fastjson:1.1.45.android'
    //1.直接依赖包
    //    compile(name: 'PlusubBaseViewLib-release', ext: 'aar')
    //2.依赖工程
    compile project(':XUtilsViewLib')
    compile project(':XUtilsLib')
    //3.依赖远程库，这个要upload to jcenter的时候，必须用jar放到libs目录
    //    compile 'com.plusub.lib:PlusubBaseViewLib:1.0.2@aar'

    //4.直接依赖jar
    //upload的时候必须把jar放置与libs中，使用远程依赖无法打包到aar中
//    compile fileTree(dir: 'libs', include:'*.jar')
}


